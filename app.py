import streamlit as st
import gdown
import numpy as np
import joblib
import os

# ‚úÖ URL ‡∏à‡∏≤‡∏Å Google Drive (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô YOUR_FILE_ID ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
url = "https://drive.google.com/uc?export=download&id=17xLLprqNYo9v2djw-Q9EkTVxHBfW7omg"
output = "best_random_forest_model.pkl"

# ‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)
if not os.path.exists(output):
    gdown.download(url, output, quiet=False)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ joblib
model = joblib.load(output)
# ‡πÅ‡∏õ‡∏•‡∏á Paper Type
paper_type_mapping = {
    "Art": 0,
    "Glossy": 1,
    "Bond": 2,
    "Offset": 3,
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": 4
}

# UI
st.set_page_config(page_title="üìÑ Paper Usage Predictor", layout="centered")
st.title("üìÑ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ")
st.markdown("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

order = st.number_input("üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Order)", min_value=1, step=1)
paper_type = st.selectbox("üì¶ ‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© (Paper Type)", options=list(paper_type_mapping.keys()))
paper_weight = st.number_input("üìè ‡πÅ‡∏Å‡∏£‡∏° (Paper Weight)", min_value=30, max_value=400, step=5)
color_front = st.slider("üé® ‡∏™‡∏µ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (Color Front)", 0, 6, 4)
color_back = st.slider("üé® ‡∏™‡∏µ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á (Color Back)", 0, 6, 1)

if st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"):
    try:
        paper_type_encoded = paper_type_mapping[paper_type]
        X_input = np.array([[order, paper_type_encoded, paper_weight, color_front, color_back]])
        prediction = model.predict(X_input)
        st.success(f"üìÑ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {int(prediction[0])} ‡πÉ‡∏ö")
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

